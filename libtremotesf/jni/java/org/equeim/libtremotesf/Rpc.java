/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.equeim.libtremotesf;

public class Rpc {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Rpc(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Rpc obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtremotesfJNI.delete_Rpc(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ServerSettings serverSettings() {
    long cPtr = libtremotesfJNI.Rpc_serverSettings(swigCPtr, this);
    return (cPtr == 0) ? null : new ServerSettings(cPtr, false);
  }

  public ServerStats serverStats() {
    long cPtr = libtremotesfJNI.Rpc_serverStats(swigCPtr, this);
    return (cPtr == 0) ? null : new ServerStats(cPtr, false);
  }

  public TorrentsVector torrents() {
    return new TorrentsVector(libtremotesfJNI.Rpc_torrents(swigCPtr, this), false);
  }

  public Torrent torrentByHash(String hash) {
    long cPtr = libtremotesfJNI.Rpc_torrentByHash(swigCPtr, this, hash);
    return (cPtr == 0) ? null : new Torrent(cPtr, true);
  }

  public Torrent torrentById(int id) {
    long cPtr = libtremotesfJNI.Rpc_torrentById(swigCPtr, this, id);
    return (cPtr == 0) ? null : new Torrent(cPtr, true);
  }

  public boolean isConnected() {
    return libtremotesfJNI.Rpc_isConnected(swigCPtr, this);
  }

  public int status() {
    return libtremotesfJNI.Rpc_status(swigCPtr, this);
  }

  public int error() {
    return libtremotesfJNI.Rpc_error(swigCPtr, this);
  }

  public String errorMessage() {
    return libtremotesfJNI.Rpc_errorMessage(swigCPtr, this);
}

  public boolean isLocal() {
    return libtremotesfJNI.Rpc_isLocal(swigCPtr, this);
  }

  public int torrentsCount() {
    return libtremotesfJNI.Rpc_torrentsCount(swigCPtr, this);
  }

  public boolean backgroundUpdate() {
    return libtremotesfJNI.Rpc_backgroundUpdate(swigCPtr, this);
  }

  public void setBackgroundUpdate(boolean background) {
    libtremotesfJNI.Rpc_setBackgroundUpdate(swigCPtr, this, background);
  }

  public boolean isUpdateDisabled() {
    return libtremotesfJNI.Rpc_isUpdateDisabled(swigCPtr, this);
  }

  public void setUpdateDisabled(boolean disabled) {
    libtremotesfJNI.Rpc_setUpdateDisabled(swigCPtr, this, disabled);
  }

  public void resetServer() {
    libtremotesfJNI.Rpc_resetServer(swigCPtr, this);
  }

  public void connect() {
    libtremotesfJNI.Rpc_connect(swigCPtr, this);
  }

  public void disconnect() {
    libtremotesfJNI.Rpc_disconnect(swigCPtr, this);
  }

  public void addTorrentFile(byte[] fileData, String downloadDirectory, int[] wantedFiles, int[] unwantedFiles, int[] highPriorityFiles, int[] normalPriorityFiles, int[] lowPriorityFiles, int bandwidthPriority, boolean start) {
    libtremotesfJNI.Rpc_addTorrentFile(swigCPtr, this, fileData, downloadDirectory, wantedFiles, unwantedFiles, highPriorityFiles, normalPriorityFiles, lowPriorityFiles, bandwidthPriority, start);
  }

  public void addTorrentLink(String link, String downloadDirectory, int bandwidthPriority, boolean start) {
    libtremotesfJNI.Rpc_addTorrentLink(swigCPtr, this, link, downloadDirectory, bandwidthPriority, start);
  }

  public void startTorrents(int[] ids) {
    libtremotesfJNI.Rpc_startTorrents(swigCPtr, this, ids);
  }

  public void startTorrentsNow(int[] ids) {
    libtremotesfJNI.Rpc_startTorrentsNow(swigCPtr, this, ids);
  }

  public void pauseTorrents(int[] ids) {
    libtremotesfJNI.Rpc_pauseTorrents(swigCPtr, this, ids);
  }

  public void removeTorrents(int[] ids, boolean deleteFiles) {
    libtremotesfJNI.Rpc_removeTorrents(swigCPtr, this, ids, deleteFiles);
  }

  public void checkTorrents(int[] ids) {
    libtremotesfJNI.Rpc_checkTorrents(swigCPtr, this, ids);
  }

  public void moveTorrentsToTop(int[] ids) {
    libtremotesfJNI.Rpc_moveTorrentsToTop(swigCPtr, this, ids);
  }

  public void moveTorrentsUp(int[] ids) {
    libtremotesfJNI.Rpc_moveTorrentsUp(swigCPtr, this, ids);
  }

  public void moveTorrentsDown(int[] ids) {
    libtremotesfJNI.Rpc_moveTorrentsDown(swigCPtr, this, ids);
  }

  public void moveTorrentsToBottom(int[] ids) {
    libtremotesfJNI.Rpc_moveTorrentsToBottom(swigCPtr, this, ids);
  }

  public void reannounceTorrents(int[] ids) {
    libtremotesfJNI.Rpc_reannounceTorrents(swigCPtr, this, ids);
  }

  public void setTorrentsLocation(int[] ids, String location, boolean moveFiles) {
    libtremotesfJNI.Rpc_setTorrentsLocation(swigCPtr, this, ids, location, moveFiles);
  }

  public void getTorrentFiles(int id, boolean scheduled) {
    libtremotesfJNI.Rpc_getTorrentFiles(swigCPtr, this, id, scheduled);
  }

  public void getTorrentPeers(int id, boolean scheduled) {
    libtremotesfJNI.Rpc_getTorrentPeers(swigCPtr, this, id, scheduled);
  }

  public void renameTorrentFile(int torrentId, String filePath, String newName) {
    libtremotesfJNI.Rpc_renameTorrentFile(swigCPtr, this, torrentId, filePath, newName);
  }

  public void getDownloadDirFreeSpace() {
    libtremotesfJNI.Rpc_getDownloadDirFreeSpace(swigCPtr, this);
  }

  public void getFreeSpaceForPath(String path) {
    libtremotesfJNI.Rpc_getFreeSpaceForPath(swigCPtr, this, path);
  }

  public void updateData() {
    libtremotesfJNI.Rpc_updateData(swigCPtr, this);
  }

  public final static class Status {
    public final static int Disconnected = 0;
    public final static int Connecting = Disconnected + 1;
    public final static int Connected = Connecting + 1;
  }

  public final static class Error {
    public final static int NoError = 0;
    public final static int TimedOut = NoError + 1;
    public final static int ConnectionError = TimedOut + 1;
    public final static int AuthenticationError = ConnectionError + 1;
    public final static int ParseError = AuthenticationError + 1;
    public final static int ServerIsTooNew = ParseError + 1;
    public final static int ServerIsTooOld = ServerIsTooNew + 1;
  }

}
