import com.android.build.OutputFile

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlinx-serialization'
}

def abis = ['armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64']
def abiVersionCodes = ['armeabi-v7a': 1, 'x86': 2, 'arm64-v8a': 3, 'x86_64': 4]

ext {
    def abi = abis.first()
    def lib = 'libQt5Core'
    if (file("libs/$abi/${lib}_${abi}.so").exists()) {
        qtHasAbiSuffix = true
    } else if (file("libs/$abi/${lib}.so").exists()) {
        qtHasAbiSuffix = false
    } else {
        // Do not abort if we are cleaning
        def tasks = gradle.startParameter.taskNames
        if (!tasks.isEmpty() && tasks.first() != 'clean') {
            throw new GradleException("No Qt binaries in $projectDir/libs")
        }
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    ndkVersion '21.0.6113669'
    defaultConfig {
        applicationId 'org.equeim.tremotesf'
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 32
        versionName '2.0.2'

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_shared', '-DANDROID_ARM_NEON=true', "-DQT_HAS_ABI_SUFFIX=$qtHasAbiSuffix"
            }
        }

        buildConfigField 'boolean', 'QT_HAS_ABI_SUFFIX', "$qtHasAbiSuffix"
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            java.srcDirs 'src/main/kotlin', '../libtremotesf/jni/java'
            jniLibs.srcDirs 'libs'
        }
        google {
            java.srcDirs 'src/google/kotlin'
        }
        fdroid {
            java.srcDirs 'src/fdroid/kotlin'
        }
    }
    externalNativeBuild {
        cmake {
            path '../libtremotesf/CMakeLists.txt'
            version '3.10.2'
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    lintOptions {
        checkReleaseBuilds false
    }
    flavorDimensions('freedom')
    productFlavors {
        google {
            dimension 'freedom'
            buildConfigField 'boolean', 'DONATIONS_GOOGLE', 'true'
        }
        fdroid {
            dimension 'freedom'
            buildConfigField 'boolean', 'DONATIONS_GOOGLE', 'false'
        }
    }
    splits {
        abi {
            enable true
            reset()
            include(*abis)
            universalApk true
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def baseAbiVersionCode = abiVersionCodes.get(output.getFilter(OutputFile.ABI))
            if (baseAbiVersionCode != null) {
                output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode
            }
        }
    }
}

rootProject.ext.vers += [
        kotlinxSerialization: '0.20.0',

        androidx: [
                appcompat: '1.1.0',
                concurrentFutures: '1.0.0',
                core: '1.2.0',
                coordinatorlayout: '1.1.0',
                drawerlayout: '1.0.0',
                fragment: '1.2.3',
                gridlayout: '1.0.0',
                lifecycle: '2.2.0',
                navigation: '2.2.1',
                recyclerview: '1.1.0',
                preference: '1.1.0',
                viewpager2: '1.0.0',
                work: '2.3.4',
        ],

        material: '1.1.0',
        benjamin: '1.0.0',
        recyclerviewFastscroll: '2.0.0',
        billing: '2.1.0'
]

dependencies {
    implementation files('libs/QtAndroid.jar')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${vers.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${vers.kotlinxSerialization}"

    implementation "androidx.appcompat:appcompat:${vers.androidx.appcompat}"
    implementation "androidx.concurrent:concurrent-futures:${vers.androidx.concurrentFutures}"
    implementation "androidx.core:core:${vers.androidx.core}"
    implementation "androidx.core:core-ktx:${vers.androidx.core}"
    implementation "androidx.coordinatorlayout:coordinatorlayout:${vers.androidx.coordinatorlayout}"
    implementation "androidx.drawerlayout:drawerlayout:${vers.androidx.drawerlayout}"
    implementation "androidx.fragment:fragment:${vers.androidx.fragment}"
    implementation "androidx.fragment:fragment-ktx:${vers.androidx.fragment}"
    implementation "androidx.gridlayout:gridlayout:${vers.androidx.gridlayout}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${vers.androidx.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${vers.androidx.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:${vers.androidx.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-service:${vers.androidx.lifecycle}"
    implementation "androidx.navigation:navigation-fragment-ktx:${vers.androidx.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${vers.androidx.navigation}"
    implementation "androidx.recyclerview:recyclerview:${vers.androidx.recyclerview}"
    implementation "androidx.preference:preference:${vers.androidx.preference}"
    implementation "androidx.viewpager2:viewpager2:${vers.androidx.viewpager2}"
    implementation "androidx.work:work-runtime:${vers.androidx.work}"

    implementation "com.google.android.material:material:${vers.material}"

    implementation "io.github.raindev:benjamin:${vers.benjamin}"
    implementation "com.simplecityapps:recyclerview-fastscroll:${vers.recyclerviewFastscroll}"

    googleImplementation "com.android.billingclient:billing:${vers.billing}"
    googleImplementation "com.android.billingclient:billing-ktx:${vers.billing}"
}
