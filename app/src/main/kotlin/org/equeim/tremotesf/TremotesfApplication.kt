package org.equeim.tremotesf

import android.app.Application
import timber.log.Timber
import java.util.concurrent.ConcurrentHashMap

class TremotesfApplication : Application() {
    companion object {
        lateinit var instance: TremotesfApplication
    }

    override fun onCreate() {
        Timber.plant(TremotesfTree())
        Timber.i("onCreate() called")
        instance = this
        super.onCreate()
    }
}

private class TremotesfTree : Timber.DebugTree() {
    val tagCache = ConcurrentHashMap<String, String>()

    override fun createStackElementTag(element: StackTraceElement): String? {
        return tagCache.getOrPut(element.className) {
            var tag = super.createStackElementTag(element) ?: return null
            // Remove nested class suffix when nested class name starts with lowercase character
            // (it was most likely generated by Kotlin compiler as part of anonymous class name)
            // and then replace '$' with '.'
            var nestedClassIndex = tag.indexOf(NESTED_CLASS_SYMBOL)
            while (nestedClassIndex != -1) {
                if (nestedClassIndex == (tag.length - 1) || tag[nestedClassIndex + 1].isLowerCase()) {
                    tag = tag.substring(0, nestedClassIndex)
                    break
                }
                nestedClassIndex = tag.indexOf(NESTED_CLASS_SYMBOL, nestedClassIndex + 1)
            }
            tag.replace(NESTED_CLASS_SYMBOL, '.')
        }
    }

    private companion object {
        const val NESTED_CLASS_SYMBOL = '$'
    }
}
